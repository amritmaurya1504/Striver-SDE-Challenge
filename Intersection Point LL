/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        // Intializing pointer
        ListNode p1 = headA;
        ListNode p2 = headB;
        
        int ct1 = 0, ct2 = 0;
        while(p1 != null){
            ct1++;
            p1 = p1.next;
        }
        while(p2 != null){
            ct2++;
            p2 = p2.next;
        }
        p1 = headA;
        p2 = headB;

        int diff = Math.abs(ct1 - ct2);
        if(ct1 > ct2){
            for(int i = 0; i < diff; i++) p1 = p1.next;
        }else{
            for(int i = 0; i < diff; i++) p2 = p2.next;
        }

        while(p1 != p2){
            p1 = p1.next;
            p2 = p2.next;
        }

        if(p1 == null || p2 == null) return null;
        
        return p1;

    }
}


public class Solution {
    public static int findIntersection(Node firstHead, Node secondHead) {
        Node a1 = firstHead;
        Node b1 = secondHead;

        while(a1 != b1){
            if(a1 == null) a1 = secondHead;
            if(b1 == null) b1 = firstHead;

            a1 = a1.next;
            b1 = b1.next;
        }

        return a1.data;
    }
}