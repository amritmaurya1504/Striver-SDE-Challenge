// BRUTE
class Solution {
    public int reversePairs(int[] nums) {
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j < nums.length; j++){
                if(nums[i] > 2 * nums[j]) count++;
            }
        }
        return count;
    }
}

// OPTIMAL
class Solution {
    public int countPairs(int low, int mid, int high, int [] arr){
        int right = mid + 1;
        int count = 0;
        for(int i = low; i <=mid; i++){
            while(right <= high && arr[i] > 2 * (long)arr[right]) right++;
            count += right - (mid + 1);
        }
        return count;
    }
    public void merge(int l, int m, int r, int[] arr){
        int i = l;
         int j = m + 1;
         ArrayList<Integer> temp = new ArrayList<>();
         
         while(i <= m && j <= r){
             if(arr[i] < arr[j]){
                 temp.add(arr[i]);
                 i++;
             }else{
                 temp.add(arr[j]);
                 j++;
             }
         }
         
         while(i <= m) temp.add(arr[i++]);
         while(j <= r) temp.add(arr[j++]);
         
         for(int it = 0; it < temp.size(); it++){
             arr[it + l] = temp.get(it); 
         }
    }
    public int mergeSort(int low, int high, int[] arr){
        int count = 0;
        if(low < high){
            int mid = (low + high) / 2;
            count += mergeSort(low, mid, arr);
            count += mergeSort(mid + 1, high, arr);
            count += countPairs(low, mid, high, arr);
            merge(low, mid, high, arr);
        }
        return count;
    }
    public int reversePairs(int[] nums) {
       return mergeSort(0, nums.length - 1, nums);
    }
}