/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

/* 
BRUTE FORCE APPROACH :
1. Create a ArrayList<> and traverse through list and add elements to the ArrayList
2. loop through list and compare front element to last element that same or not 

OPTIMAL APPROACH :
1. Find Middle of Linked List
2. Reverse list after middle node
3 Join reverse list toh middle 
4 create two pointer and tranverse through loop 
    4a. First pointer pointing to head
    4b. Second pointer pointer to the reverse linked list head
5 compare if same or not

*/

class Solution {
    public ListNode reverse(ListNode head){
        ListNode curr = head;
        ListNode prev = null;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        if(head.next == null) return true;
        if(head.next.next == null){
            if (head.val != head.next.val) return false;
            else return true;
        }

        ListNode fast = head, slow = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        slow.next = reverse(slow.next);
        slow = slow.next;

        while(slow != null){
            if(head.val != slow.val) return false;
            head = head.next;
            slow = slow.next;
        }

        return true;
    }
}