import java.util.*;
public class Solution {
    public static List< List < Integer > > triplet(int n, int []arr) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(arr);

        for(int i = 0; i < n - 2; i++){
            if(i != 0 && arr[i] == arr[i - 1]) continue;

            int low = i + 1;
            int high = n - 1;
            while(low < high){
                int sum = arr[i] + arr[low] + arr[high];
                if(sum == 0){
                    // add this tripplet to answer
                    ans.add(Arrays.asList(arr[i], arr[low], arr[high]));
                    // pass duplicates
                    while(low < high && arr[low] == arr[low + 1]) low++;
                    while(low < high && arr[high] == arr[high - 1]) high--;
                    low++;
                    high--;

                }else if(sum > 0){
                    high--;
                }else{
                    low++;
                }
            }
        }
        return ans;
    }
}

// Time Complexity -> O(NlOGn + n2)



// BETTER Approacch -> 

public static List<List<Integer>> triplet(int n, int[] arr) {
    Set<List<Integer>> st = new HashSet<>();

    for (int i = 0; i < n; i++) {
        Set<Integer> hashset = new HashSet<>();
        for (int j = i + 1; j < n; j++) {
            //Calculate the 3rd element:
            int third = -(arr[i] + arr[j]);

            //Find the element in the set:
            if (hashset.contains(third)) {
                List<Integer> temp = Arrays.asList(arr[i], arr[j], third);
                temp.sort(null);
                st.add(temp);
            }
            hashset.add(arr[j]);
        }
    }
}

// BRUTE APPROACH ->

public static List<List<Integer>> triplet(int n, int[] arr) {
    Set<List<Integer>> st = new HashSet<>();

    // check all possible triplets:
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                if (arr[i] + arr[j] + arr[k] == 0) {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                    temp.sort(null);
                    st.add(temp);
                }
            }
        }
    }

    // store the set elements in the answer:
    List<List<Integer>> ans = new ArrayList<>(st);
    return ans;
}

