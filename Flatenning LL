/*Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}
*/
/*  Function which returns the  root of 
    the flattened linked list. */
class GfG
{
    Node merge(Node list1, Node list2){
        Node dummy = new Node(0);
        if(list1==null && list2==null) return null;
        else if(list1==null) return list2;
        else if(list2==null) return list1;
        else{
          
            Node res =dummy;
            while(list1!=null && list2!=null){
                if(list2.data>list1.data){
                    res.bottom = list1;
                    list1=list1.bottom;
                }
                else{
                    res.bottom = list2;
                    list2=list2.bottom;
                }
                res = res.bottom;
            }
            if(list1==null) res.bottom=list2;
            else res.bottom = list1;
        }
        return dummy.bottom;
    }
    Node flatten(Node root)
    {
        Node temp = root;
        Node mergedNode = null;
        while(temp != null){
            mergedNode = merge(mergedNode, temp);
            temp = temp.next;
        }
        
        return mergedNode;
    }
}